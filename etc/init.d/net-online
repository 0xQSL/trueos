#!/sbin/openrc-run
# Copyright (c) 2018 the TrueOS Project <www.trueos.org>
# Available under the 2-clause BSD license

name="net-online"
description="Becomes active when networking is usable"
extra_commands=retest
interval=${retest_interval:-2}

depend()
{
	after network
	provide network-online
}

check_online()
{
  #Main function: Just see if there is anything listening at the standard gateway (I.E. IP can be resolved)
  nc -uz 255.255.255.255 111 > /dev/null 2>&1
  ok=$?
  if [ 0 -eq ${ok} ] && (yesno "${include_ping_test:-no}") ; then
    #Optional: Also perform a quick single-ping of a host to verify that it is accessible
    ping_test_host="${ping_test_host:-google.com}"
    if [ -n "$ping_test_host" ]; then
	ping -c 1 "$ping_test_host" > /dev/null 2>&1
	ok=$?
    fi
  fi
  if [ 0 -eq ${ok} ] ; then
   return 0
  else
    return 1
  fi
}

retest(){
  tout=`service_get_value timeout`
  #einfo "Retest connection: ${tout}"
  if [ ${tout} -gt 0 ] ; then
    : $((tout -= ${interval}))
    service_set_value timeout ${tout}
    if check_online ; then
      mark_service_started net-online
    elif [ ${tout} -gt 0 ] ; then
      (sleep ${interval}; /sbin/service net-online retest) &
    fi
  else
    #While the retest command is designed only for the internal auto-refresh system, 
    #  it is still possible for the user to manually run it. Show an error in that situation.
    eerror "Retest limit exceeded: service restart required"
    return 1
  fi
}

start(){
  if check_online ; then
    mark_service_started net-online
  else
    mark_service_inactive net-online
    #Start the automatic retest routine in the background
    tout=${retest_timeout:-120} #retry for 120 seconds by default
    service_set_value timeout ${tout}
    (sleep ${interval}; /sbin/service net-online retest) &
  fi
}

status_pre(){
  # If the automatic retest routine is currently running, show the status of that as well
  if service_inactive ; then
    tout=`service_get_value timeout`
    if [ ${tout:-0} -gt 0 ] ; then
      einfo "Automatically retesting connection: ${tout} seconds remaining"
    fi
  fi
}
