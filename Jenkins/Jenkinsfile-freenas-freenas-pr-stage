/*

This is the default Jenkins Pipeline file used to create our
freenas master images.

*/

pipeline {
  agent { label 'FreeNAS-FreeNAS-PR' }

  environment {
    GH_ORG = 'trueos'
    GH_REPO = 'trueos'
    SRCROOT = '/usr/freenas-src'
    POUDRIERE_BASE = 'fn-master-base'
    POUDRIERE_PORTS = 'fn-master-ports'

    // Set the MANIFEST we want to use for this build
    //TRUEOS_MANIFEST='${SRCROOT}/release/manifests/freenas-master.json'
  }

  stages {
    stage('Checkout') {
      steps {
        checkout scm
      }
    }

    stage('Nullfs') {
      steps {
	// Cleanup artifacts
        sh 'rm -rf ${WORKSPACE}/artifacts'
        sh 'mkdir -p ${WORKSPACE}/artifacts/repo'

	// Prep the fake SRCROOT
        sh 'mkdir -p ${SRCROOT} || true'
        sh 'umount -f ${SRCROOT} || true'
        sh 'mount_nullfs ${WORKSPACE} ${SRCROOT}'

	// Roll back the ZFS dataset
	sh '${WORKSPACE}/Jenkins/scripts/snapobj.sh rollback /usr/obj${SRCROOT}'

	// Cleanup any output dirs
	sh 'rm -rf /usr/local_source || true'
	sh 'mkdir -p /usr/local_source'
        sh 'rm -rf /usr/obj/${SRCROOT}/amd64.amd64 || true'
        sh 'chflags -R noschg /usr/obj/${SRCROOT}/amd64.amd64 || true'
        sh 'rm -rf /usr/obj/${SRCROOT}/amd64.amd64 || true'
      }
    }
    stage('World') {
      post {
        always {
          archiveArtifacts artifacts: 'artifacts/**', fingerprint: true
        }
        failure {
          sh 'tail -n 200 ${WORKSPACE}/artifacts/world.log'
        }
      }
      steps {
        sh 'cd ${SRCROOT} && make -j $(sysctl -n hw.ncpu) buildworld >${WORKSPACE}/artifacts/world.log 2>&1'
      }
    }
    stage('Kernel') {
      post {
        always {
          archiveArtifacts artifacts: 'artifacts/**', fingerprint: true
        }
        failure {
          sh 'tail -n 200 ${WORKSPACE}/artifacts/kernel.log'
        }
      }
      steps {
        sh 'cd ${SRCROOT} && make -j $(sysctl -n hw.ncpu) buildkernel >${WORKSPACE}/artifacts/kernel.log 2>&1'
      }
    }
    stage('Base Packages') {
      post {
        always {
          sh 'cp -r /usr/local/poudriere/data/logs/bulk/fn-master-base-fn-master-ports/latest/logs ${WORKSPACE}/artifacts/poudriere-logs'
          archiveArtifacts artifacts: 'artifacts/**', fingerprint: true
        }
        failure {
          sh 'tail -n 200 ${WORKSPACE}/artifacts/packages.log'
        }
      }
      environment {
        // Get our credentials from Jenkins
        PKGSIGNKEY = credentials('a50f9ddd-1460-4951-a304-ddbf6f2f7990')
      }
      steps {
        sh 'rm -rf /usr/obj${SRCROOT}/amd64.amd64/repo'
        sh 'cd ${SRCROOT} && make -j 16 packages >${WORKSPACE}/artifacts/packages.log 2>&1'
      }
    }
    stage('Release') {
      post {
        always {
          archiveArtifacts artifacts: 'artifacts/**', fingerprint: true
        }
        failure {
          sh 'tail -n 200 ${WORKSPACE}/artifacts/release.log'
        }
	success {
	  // Success! We had a good build, lets updated future PR builds with this snapshot
	  sh '${WORKSPACE}/Jenkins/scripts/snapobj.sh snapshot /usr/obj${SRCROOT}'
	}
      }
      steps {
        sh 'cd ${SRCROOT}/release && make iso >${WORKSPACE}/artifacts/release.log 2>&1'
      }
    }
  }
  post {
    success {
      script {
        cleanWs notFailBuild: true
      }
    }
    always {
      archiveArtifacts artifacts: 'artifacts/**', fingerprint: true
      sh 'umount -f ${SRCROOT} || true'
    }
  }
}
