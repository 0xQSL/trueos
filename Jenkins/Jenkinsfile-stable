/*

This is the Jenkins Pipeline file used to create our
stable images

*/

pipeline {
  agent { label 'TrueOS-World' }

  environment {
    GH_ORG = 'trueos'
    GH_REPO = 'trueos'
    SRCROOT = '/usr/trueos-src'

    // Set the MANIFEST we want to use for this build
    TRUEOS_MANIFEST='${WORKSPACE}/release/manifests/trueos-stable.json'
  }

  stages {

    stage('Checkout') {
      steps {
        checkout scm
      }
    }

    stage('Nullfs') {
      steps {
        sh 'mkdir -p ${SRCROOT} || true'
        sh 'mount_nullfs ${WORKSPACE} ${SRCROOT}'
      }
    }

    stage('Pre-Clean') {
      steps {
        sh 'cd ${SRCROOT} && make clean'
        sh 'cd ${SRCROOT}/release && make clean'
      }
    }
    stage('World') {
      steps {
        sh 'cd ${SRCROOT} && make -j32 buildworld'
      }
    }
    stage('Kernel') {
      steps {
        sh 'cd ${SRCROOT} && make -j32 buildkernel'
      }
    }
    stage('Base Packages') {
      environment {
	   // Get our credentials from Jenkins
           PKGSIGNKEY = credentials('a50f9ddd-1460-4951-a304-ddbf6f2f7990')
      }
      steps {
        sh 'rm -rf /usr/obj${SRCROOT}/amd64.amd64/repo'
        sh 'cd ${SRCROOT} && make -j 4 packages'
      }
    }
    stage('ISO') {
      steps {
        sh 'rm -rf ${WORKSPACE}/artifacts'
        sh 'cd ${SRCROOT}/release && make iso'
        sh 'mkdir -p ${WORKSPACE}/artifacts'
        sh 'cp /usr/obj${SRCROOT}/amd64.amd64/release/*.iso ${WORKSPACE}/artifacts'
      }
    }
    stage('Dist') {
      steps {
        sh 'cd ${SRCROOT}/release && make packagesystem'
        sh 'mkdir -p ${WORKSPACE}/artifacts/dist'
        sh 'cp /usr/obj${SRCROOT}/amd64.amd64/release/*.txz ${WORKSPACE}/artifacts/dist/'
        sh 'cp /usr/obj${SRCROOT}/amd64.amd64/release/MANIFEST ${WORKSPACE}/artifacts/dist/'
      }
    }
    stage('Artifact') {
      steps {
        archiveArtifacts artifacts: 'artifacts/**', fingerprint: true
      }
    }
    stage('Publish') {
      steps {
        sshagent (credentials: ['syncbot-credentials']) {
          sh 'ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null syncbot@pkg.trueos.org mkdir -p /data/pkg/stable/ || true'
          sh 'rsync -av --delete-after --delay-updates -e "ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null" /usr/obj${SRCROOT}/pkgset/ syncbot@pkg.trueos.org:/data/pkg/stable/'
          sh 'ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null syncbot@pkg.trueos.org mkdir -p /data/iso/stable/ || true'
          sh 'rsync -av --delete-after --delay-updates -e "ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null" ${WORKSPACE}/artifacts/ syncbot@pkg.trueos.org:/data/iso/stable/'
        }
      }
    }
  }
  post {
    success {
      sh 'rm -rf /usr/obj${SRCROOT} || true'
      script {
        cleanWs notFailBuild: true
      }
    }
    always {
      sh 'umount -f ${SRCROOT} || true'
    }
  }
}
