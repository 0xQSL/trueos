/*

This is the default Jenkins Pipeline file used to create our
freenas master images.

*/

pipeline {
  agent { label 'TrueOS-World' }

  environment {
    GH_ORG = 'trueos'
    GH_REPO = 'trueos'
    SRCROOT = '/usr/freenas-src'
    POUDRIERE_BASE = 'fn-master-base'
    POUDRIERE_PORTS = 'fn-master-ports'

    // Set the MANIFEST we want to use for this build
    TRUEOS_MANIFEST='${WORKSPACE}/release/manifests/freenas-master.json'
  }

  stages {
    stage('Checkout') {
      steps {
        checkout scm
      }
    }

    stage('Nullfs') {
      steps {
        sh 'mkdir -p ${SRCROOT} || true'
        sh 'mount_nullfs ${WORKSPACE} ${SRCROOT}'
      }
    }
    stage('Pre-Clean') {
      steps {
        sh 'cd ${SRCROOT} && make clean'
        sh 'cd ${SRCROOT}/release && make clean'
      }
    }
    stage('Prep-Ports') {
      steps {
        sh 'umount -f /usr/freenas-ports || true'
        sh 'rm -rf /usr/freenas-ports || true'
        sh 'git clone --depth=1 --recurse-submodules -j8 https://github.com/trueos/trueos-ports /usr/freenas-ports'
        sh 'cd /usr/freenas-ports/freenas && ./update-to-branch.sh all master'
      }
    }
    stage('World') {
      steps {
        sh 'cd ${SRCROOT} && make -j32 buildworld'
      }
    }
    stage('Kernel') {
      steps {
        sh 'cd ${SRCROOT} && make -j32 buildkernel'
      }
    }
    stage('Base Packages') {
      environment {
	   // Get our credentials from Jenkins
           PKGSIGNKEY = credentials('a50f9ddd-1460-4951-a304-ddbf6f2f7990')
      }
      steps {
        sh 'rm -rf /usr/obj${SRCROOT}/amd64.amd64/repo'
        sh 'cd ${SRCROOT} && make -j32 packages -DDB_FROM_SRC'
      }
    }
    stage('Ports') {
      environment {
	   // Get our credentials from Jenkins
           PKG_REPO_SIGNING_KEY = credentials('a50f9ddd-1460-4951-a304-ddbf6f2f7990')
      }
      steps {
        sh 'cd ${SRCROOT}/release && make poudriere'
        // Sign the repo with our repo signing key
        sh 'cd /usr/local/poudriere/data/packages/fn-master-base-fn-master-ports && pkg-static repo . ${PKG_REPO_SIGNING_KEY}'
      }
    }
    stage('Release') {
      post {
        success {
          archiveArtifacts artifacts: 'artifacts/**', fingerprint: true
        }
      }
      steps {
        sh 'rm -rf ${WORKSPACE}/artifacts'
        sh 'cd ${SRCROOT}/release && make release'
        sh 'mkdir -p ${WORKSPACE}/artifacts/repo'
        sh 'cp /usr/obj${SRCROOT}/amd64.amd64/release/*.iso ${WORKSPACE}/artifacts'
        sh 'cp /usr/obj${SRCROOT}/amd64.amd64/release/*.txz ${WORKSPACE}/artifacts'
        sh 'cp /usr/obj${SRCROOT}/amd64.amd64/release/MANIFEST ${WORKSPACE}/artifacts'
	sh 'sha256 -q ${WORKSPACE}/artifacts/disc1.iso > ${WORKSPACE}/artifacts/disc1.iso.sha256'
	sh 'md5 -q ${WORKSPACE}/artifacts/disc1.iso > ${WORKSPACE}/artifacts/disc1.iso.md5'
      }
    }

    stage('Publish') {
      steps {
        sshagent (credentials: ['syncbot-credentials']) {
          sh 'ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null syncbot@pkg.trueos.org mkdir -p /data/pkg/unstable/ports/$(pkg-static -o ABI_FILE=/bin/sh config ABI)/latest || true'
          sh 'rsync -av --delete-after --delay-updates -e "ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null" /usr/local/poudriere/data/packages/fn-master-base-fn-master-ports/ syncbot@pkg.trueos.org:/data/pkg/unstable/ports/$(pkg-static -o ABI_FILE=/bin/sh config ABI)/latest/'
          sh 'ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null syncbot@pkg.trueos.org mkdir -p /data/pkg/unstable/base/ || true'
          sh 'rsync -av --delete-after --delay-updates -e "ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null" /usr/obj${SRCROOT}/repo/ syncbot@pkg.trueos.org:/data/pkg/unstable/base/'
          sh 'ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null syncbot@pkg.trueos.org mkdir -p /data/iso/unstable/ || true'
          sh 'rsync -av --delete-after --delay-updates -e "ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null" ${WORKSPACE}/artifacts/ syncbot@pkg.trueos.org:/data/iso/unstable/'
        }
      }
    }
  }
  post {
    success {
      sh 'cd ${SRCROOT} && make clean'
      sh 'cd ${SRCROOT}/release && make clean'
      sh 'rm -rf /usr/obj${SRCROOT}'
      script {
        cleanWs notFailBuild: true
      }
    }
    always {
      sh 'umount -f ${SRCROOT}'
    }
  }
}
