#
# $FreeBSD$
#

name = "%BASENAME%-%PKGNAME%"
origin = "base"
version = "%VERSION%"
comment = "%COMMENT% %VCS_REVISION%"
categories = [ base ]
maintainer = "re@FreeBSD.org"
www = "https://www.FreeBSD.org"
prefix = "/"
vital = true
licenselogic = "single"
licenses = [ BSD2CLAUSE ]
desc = <<EOD
%DESC%
EOD
scripts: {
	post-install = <<EOD
	if [ -z "${PKG_ROOTDIR}" ] ; then
		PKG_ROOTDIR=/
	fi
	TM=${PKG_ROOTDIR}/var/db/trueos-manifest.json
	if [ ! -e ${PKG_ROOTDIR}/etc/master.passwd ] ; then
		# Boot-strap /etc for fresh install
		echo "** Performing first-time setup of /etc **"
		tar xpf ${PKG_ROOTDIR}/var/db/etcupdate-current.tbz -C ${PKG_ROOTDIR}
		etcupdate extract -D ${PKG_ROOTDIR} -t ${PKG_ROOTDIR}/var/db/etcupdate-current.tbz
	else
		# Update existing /etc directory
		echo "** Performing automated etcupdate of /etc **"
		etcupdate -D ${PKG_ROOTDIR} -a -t ${PKG_ROOTDIR}/var/db/etcupdate-current.tbz
	fi

	# Do the first-time setup of package repo
	if [ ! -e "${PKG_ROOTDIR}/etc/pkg/TrueOS.conf" ] ; then

		# Do Setup for ports repo
		TM_PUBKEY="none"
		if [ "$(jq -r '."pkg-repo"."pubKey" | length' ${TM})" != "0" ]; then
			echo "Saving pkg ports repository public key"
			jq -r '."pkg-repo"."pubKey" | join("\n")' ${TM} \
			> ${PKG_ROOTDIR}/usr/share/keys/pkg/trueos.pub
			TM_PUBKEY="/usr/share/keys/pkg/trueos.pub"
		fi
		if [ "$(jq -r '."pkg-repo"."url" | length' ${TM})" != "0" ]; then
			TM_PKGURL="$(jq -r '."pkg-repo"."url"' ${TM})"
			cat ${PKG_ROOTDIR}/etc/pkg/TrueOS.conf.pubkey.dist \
			| sed "s|%%REPONAME%%|TrueOS-ports|g" \
			| sed "s|%%PUBKEY%%|${TM_PUBKEY}|g" \
			| sed "s|%%URL%%|${TM_PKGURL}|g" \
			>${PKG_ROOTDIR}/etc/pkg/TrueOS.conf
		fi

		# Do Setup for base repo
		TM_PUBKEY="none"
		if [ "$(jq -r '."base-pkg-repo"."pubKey" | length' ${TM})" != "0" ]; then
			echo "Saving pkg base repository public key"
			jq -r '."base-pkg-repo"."pubKey" | join("\n")' ${TM} \
			>${PKG_ROOTDIR}/usr/share/keys/pkg/trueos-base.pub
			TM_PUBKEY="/usr/share/keys/pkg/trueos-base.pub"
		fi
		if [ "$(jq -r '."base-pkg-repo"."url" | length' ${TM})" != "0" ]; then
			TM_PKGURL="$(jq -r '."base-pkg-repo"."url"' ${TM})"
			cat ${PKG_ROOTDIR}/etc/pkg/TrueOS.conf.pubkey.dist \
			| sed "s|%%REPONAME%%|TrueOS-base|g" \
			| sed "s|%%PUBKEY%%|${TM_PUBKEY}|g" \
			| sed "s|%%URL%%|${TM_PKGURL}|g" \
			>>${PKG_ROOTDIR}/etc/pkg/TrueOS.conf
		fi
	fi

	cap_mkdb %CAP_MKDB_ENDIAN% ${PKG_ROOTDIR}/etc/login.conf
	pwd_mkdb -i -p -d  ${PKG_ROOTDIR}/etc ${PKG_ROOTDIR}/etc/master.passwd
	services_mkdb %CAP_MKDB_ENDIAN% -q -o ${PKG_ROOTDIR}/var/db/services.db ${PKG_ROOTDIR}/etc/services
	chmod 1777 ${PKG_ROOTDIR}/tmp

	# Update any missing dirs which need added now from mtree spec
        mtree -deU -f ${PKG_ROOTDIR}/etc/mtree/BSD.root.dist \
            -p ${PKG_ROOTDIR}
        mtree -deU -f ${PKG_ROOTDIR}/etc/mtree/BSD.usr.dist \
            -p ${PKG_ROOTDIR}/usr
        mtree -deU -f ${PKG_ROOTDIR}/etc/mtree/BSD.var.dist \
            -p ${PKG_ROOTDIR}/var
        mtree -deU -f ${PKG_ROOTDIR}/etc/mtree/BSD.include.dist \
            -p ${PKG_ROOTDIR}/usr/include
        if [ -e ${PKG_ROOTDIR}/etc/mtree/BSD.lib32.dist ] ; then
		mtree -deU -f ${PKG_ROOTDIR}/etc/mtree/BSD.lib32.dist \
		     -p ${PKG_ROOTDIR}/usr
	fi

EOD
}
deps: {
    "%BASENAME%-clibs": {
        origin: "base"
        version: "%VERSION%"
    }
    "%BASENAME%-libmd": {
        origin: "base"
        version: "%VERSION%"
    }
    "%BASENAME%-libarchive": {
        origin: "base"
        version: "%VERSION%"
    }
    "%BASENAME%-libbz2": {
        origin: "base"
        version: "%VERSION%"
    }
    "%BASENAME%-liblzma": {
        origin: "base"
        version: "%VERSION%"
    }
    "%BASENAME%-libbsdxml": {
        origin: "base"
        version: "%VERSION%"
    }
    "%BASENAME%-libutil": {
        origin: "base"
        version: "%VERSION%"
    }
    "%BASENAME%-librc": {
        origin: "base"
        version: "%VERSION%"
    }
    "%BASENAME%-libfetch": {
        origin: "base"
        version: "%VERSION%"
    }
    "%BASENAME%-libelf": {
        origin: "base"
        version: "%VERSION%"
    }
    "%BASENAME%-libz": {
        origin: "base"
        version: "%VERSION%"
    }
    "%BASENAME%-lib": {
        origin: "base"
        version: "%VERSION%"
    }
    "%BASENAME%-lib80211": {
        origin: "base"
        version: "%VERSION%"
    }
    "%BASENAME%-libbsm": {
        origin: "base"
        version: "%VERSION%"
    }
    "%BASENAME%-libeinfo": {
        origin: "base"
        version: "%VERSION%"
    }
    "%BASENAME%-libgeom": {
        origin: "base"
        version: "%VERSION%"
    }
    "%BASENAME%-libkvm": {
        origin: "base"
        version: "%VERSION%"
    }
    "%BASENAME%-libopie": {
        origin: "base"
        version: "%VERSION%"
    }
    "%BASENAME%-libsbuf": {
        origin: "base"
        version: "%VERSION%"
    }
    "%BASENAME%-libucl": {
        origin: "base"
        version: "%VERSION%"
    }
    "%BASENAME%-libwrap": {
        origin: "base"
        version: "%VERSION%"
    }
    "%BASENAME%-libxo": {
        origin: "base"
        version: "%VERSION%"
    }
    "%BASENAME%-libypclnt": {
        origin: "base"
        version: "%VERSION%"
    }
    "%BASENAME%-libcrypt": {
        origin: "base"
        version: "%VERSION%"
    }
    "pkg": {
	origin: "ports-mgmt/pkg"
	version: ">0"
    }
    "jq": {
	origin: "textproc/jq"
	version: ">0"
    }
}
directories {
    /dev = "y";
    /tmp = "y";
}
